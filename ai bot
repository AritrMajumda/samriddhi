import os
import google.generativeai as ggenai
import speech_recognition as sr
from gtts import gTTS
import pygame.mixer
import time
import requests
from googlesearch import search

# Configure Gemini API
gak = "AIzaSyDQXkyG0ECGKKJzD5nRqMLTN0gJepmY2E0"  # Replace with your API key
ggenai.configure(api_key=gak)
m = ggenai.GenerativeModel('gemini-1.5-flash')

# Supported languages with codes for speech recognition and TTS
Lang = {
    "english": "en-IN",  # Indian English
    "hindi": "hi-IN",    # Hindi
    "bengali": "bn-IN"   # Bengali
}

# Mapping for gTTS (uses simpler codes without region)
TTS_Lang = {
    "english": "en",
    "hindi": "hi",
    "bengali": "bn"
}

def getres(pr, la="english"):
    tpr = f"Provide information about Indian government schemes or legal terms (old or new) related to: {pr}. Respond only in {la}."
    try:
        res = m.generate_content(tpr)
        return res.text
    except Exception as e:
        return f"Error generating response: {str(e)}"

def gvi(la_code):
    """Capture voice input and convert it to text."""
    rec = sr.Recognizer()
    with sr.Microphone() as source:
        print("Please speak your question...")
        rec.adjust_for_ambient_noise(source, duration=1)
        au = rec.listen(source)
    
    try:
        text = rec.recognize_google(au, language=la_code)
        print(f"You said: {text}")
        return text
    except sr.UnknownValueError:
        return "Sorry, can you tell me a bit more clearly?"
    except sr.RequestError as e:  # Fixed syntax here
        return f"Error with speech recognition: {str(e)}"

def text_to_speech(text, language):
    """Convert text to speech and play it using pygame.mixer."""
    audio_file = f"output_{int(time.time())}.mp3"  # Unique filename
    try:
        if not text or text.isspace():
            print("No text to convert to speech.")
            return
        
        tts = gTTS(text=text, lang=TTS_Lang[language], slow=False)
        tts.save(audio_file)
        print(f"Audio file saved as {audio_file}")

        pygame.mixer.init()
        pygame.mixer.music.load(audio_file)
        pygame.mixer.music.play()
        print("Audio playback started.")

        while pygame.mixer.music.get_busy():
            time.sleep(0.1)

        pygame.mixer.music.unload()
        if os.path.exists(audio_file):
            os.remove(audio_file)
            print("Audio file deleted.")
    except Exception as e:
        print(f"Error in text-to-speech: {str(e)}")
        if os.path.exists(audio_file):
            try:
                os.remove(audio_file)
                print("Audio file deleted despite error.")
            except:
                print("Failed to clean up audio file.")

def gsl(q):
    """Fetch a relevant link based on the query."""
    try:
        for url in search(f"Indian government schemes or laws {q}", num_results=1):
            return url
    except Exception as e:
        return f"Error fetching link: {str(e)}"

def glc(pr):
    while True:
        c = input(pr).lower()
        if c in Lang:
            return c
        print("You have given an unsupported language. Please choose between: English, Hindi, Bengali.")

def gim():
    while True:
        c = input("How would you like to ask the question? (text/voice): ").lower()
        if c in ["text", "voice"]:
            return c
        print("Please choose between the given two choices 'text' or 'voice'.")

def ai_bot():
    """Main function to run the AI bot."""
    print("Welcome to the Indian Govt Schemes & Laws Bot! Type 'exit' to quit.")
    print("Supported languages: English, Hindi, Bengali")

    # Ask for language preferences once at the start
    input_lang = glc("What language would you like to use for asking questions? (english/hindi/bengali): ")
    reply_lang = glc("What language would you like the replies in? (english/hindi/bengali): ")

    input_lang_code = Lang[input_lang]
    reply_lang_code = Lang[reply_lang]

    print(f"\nYou will ask questions in {input_lang} and get replies in {reply_lang} (text and voice).")

    # Ask for input method once
    input_method = gim()
    print(f"You chose to ask questions via {input_method}.")

    while True:
        # Get user input based on chosen method
        if input_method == "text":
            user_input = input(f"\nEnter your question (in {input_lang}): ").strip()
        else:  # voice
            user_input = gvi(input_lang_code)

        if user_input.lower() == "exit":
            print("Goodbye!")
            break

        # Get response from Gemini
        res = getres(user_input, la=reply_lang)
        print(f"\nResponse (in {reply_lang}): {res}")

        # Speak the response in the reply language
        text_to_speech(res, reply_lang)

        # Provide a smart link
        link = gsl(user_input)
        print(f"Source Link: {link}")

if __name__ == "__main__":
    ai_bot()
